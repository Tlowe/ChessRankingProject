/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.chessrankingproject;

import java.awt.Color;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.xml.parsers.ParserConfigurationException;

/**
 *
 * @author Travis Lowe
 */
public class MainFrame extends javax.swing.JFrame {

    DataBasetoXML DBhandle;
    
    private PlayerArrayList mPlayerArrayList = new PlayerArrayList();
    PlayerTableModel PlayerTableModel ;
    
    PlayerEventListener mainHandler = new localEventlistener();
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        
        initComponents();
        initProgram();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        ViewPlayerStatsButton = new javax.swing.JButton();
        PlayerTableScrollPane = new javax.swing.JScrollPane();
        playerInfoTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        DataBaseSearchTextField = new javax.swing.JTextField();
        SearchDataBaseButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        AddNewPlayerButton = new javax.swing.JButton();
        AddGameResultsButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        DebugTxtArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setText("Chess Club Ranking");

        ViewPlayerStatsButton.setText("View Selected Player Statistics");
        ViewPlayerStatsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewPlayerStatsButtonActionPerformed(evt);
            }
        });

        playerInfoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Last","First","ID", "Games Played","Current Ranking", "Games Won", "Games Lost", "Games Drawn", "Highest Rating", "Lowest Rating","Database Ranking"
            }

        ));
        PlayerTableScrollPane.setViewportView(playerInfoTable);

        jLabel2.setText("Search by Player Last Name:");

        DataBaseSearchTextField.setText(". . .");
        DataBaseSearchTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DataBaseSearchTextFieldMouseClicked(evt);
            }
        });
        DataBaseSearchTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DataBaseSearchTextFieldActionPerformed(evt);
            }
        });

        SearchDataBaseButton.setText("Search DataBase");
        SearchDataBaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchDataBaseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(148, 148, 148)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(DataBaseSearchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(SearchDataBaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ViewPlayerStatsButton)
                    .addComponent(PlayerTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 1073, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DataBaseSearchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SearchDataBaseButton)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(PlayerTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(ViewPlayerStatsButton)
                .addGap(111, 111, 111))
        );

        AddNewPlayerButton.setText("Add / Remove Player");
        AddNewPlayerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddNewPlayerButtonActionPerformed(evt);
            }
        });

        AddGameResultsButton.setText("Add New Game Results");
        AddGameResultsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddGameResultsButtonActionPerformed(evt);
            }
        });

        DebugTxtArea.setEditable(false);
        DebugTxtArea.setBackground(new java.awt.Color(240, 240, 240));
        DebugTxtArea.setColumns(20);
        DebugTxtArea.setRows(5);
        jScrollPane2.setViewportView(DebugTxtArea);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(AddNewPlayerButton)
                        .addGap(18, 18, 18)
                        .addComponent(AddGameResultsButton))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 921, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(32, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddNewPlayerButton)
                    .addComponent(AddGameResultsButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(357, 357, 357)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(4, 4, 4)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DataBaseSearchTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DataBaseSearchTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DataBaseSearchTextFieldActionPerformed

    private void AddNewPlayerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddNewPlayerButtonActionPerformed
//        try {
//            DataBasetoXML playerDB = new DataBasetoXML("John", "Doe");
//            DebugTxtArea.setForeground(Color.red);
//           
//            DebugTxtArea.setText("New Folder Created and Player added to C:/ChessGame !!");
//        } catch (Exception e) {
//            
//            
//        }
        if(mPlayerArrayList == null){
            PlayerFrame pFrame = new PlayerFrame();
            pFrame.addListener(mainHandler);
            pFrame.setVisible(true);
        
        }else{
            PlayerFrame pFrame = new PlayerFrame(mPlayerArrayList.getPlayerArrayListCopy());
            pFrame.addListener(mainHandler);
            pFrame.setVisible(true);
        }
        
   
    }//GEN-LAST:event_AddNewPlayerButtonActionPerformed

    private void SearchDataBaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchDataBaseButtonActionPerformed
       
        
        String LastName = "";
        try {
             
             LastName = DataBaseSearchTextField.getText().trim();
             
        } catch (Exception e) {
            DebugTxtArea.setText("Invalid Database Search Entered. Input a single text string.");
        }
        
        boolean hasfound = false;
        
        for(int j = 0; j < PlayerTableModel.getRowCount(); j++){//For each column in that row
            String nameOnTable = (String)PlayerTableModel.getValueAt(j, 0);
            if(nameOnTable.equalsIgnoreCase(LastName)){//Search the model
                System.out.println(PlayerTableModel.getValueAt(j, 0));
                playerInfoTable.clearSelection();
                playerInfoTable.setRowSelectionInterval(j, j);
                hasfound = true;
                break;
            }
            
        }
        
        if(hasfound == false){
                   
            DebugTxtArea.setText("Unable to Find any Players with the last name " + LastName + ".");
            
        }
        
    }//GEN-LAST:event_SearchDataBaseButtonActionPerformed

    private void ViewPlayerStatsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewPlayerStatsButtonActionPerformed
        PlayerStats pstatframe = new PlayerStats(PlayerTableModel.getplayerAtRow(playerInfoTable.getSelectedRow()));
        pstatframe.setVisible(true);
    }//GEN-LAST:event_ViewPlayerStatsButtonActionPerformed

    private void AddGameResultsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddGameResultsButtonActionPerformed
        GameResultsFrame gFrame = new GameResultsFrame( mPlayerArrayList.getPlayerArrayListCopy());
        gFrame.addListener(mainHandler);
        gFrame.setVisible(true);
        this.setEnabled(false);
    }//GEN-LAST:event_AddGameResultsButtonActionPerformed

    private void DataBaseSearchTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DataBaseSearchTextFieldMouseClicked
       DataBaseSearchTextField.setText("");
    }//GEN-LAST:event_DataBaseSearchTextFieldMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddGameResultsButton;
    private javax.swing.JButton AddNewPlayerButton;
    private javax.swing.JTextField DataBaseSearchTextField;
    private javax.swing.JTextArea DebugTxtArea;
    private javax.swing.JScrollPane PlayerTableScrollPane;
    private javax.swing.JButton SearchDataBaseButton;
    private javax.swing.JButton ViewPlayerStatsButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable playerInfoTable;
    // End of variables declaration//GEN-END:variables

private void initProgram(){

    try {
        DBhandle = new DataBasetoXML();
        DBhandle.addListener(mainHandler);
        //DBhandle = new DataBasetoXML("Jerry", "west"); // when you need to build a test file
        this.mPlayerArrayList = (PlayerArrayList) DBhandle.getAllPlayersSorted(mPlayerArrayList);
        
        PlayerTableModel = new PlayerTableModel(mPlayerArrayList.getPlayerArrayListCopy());
        
        playerInfoTable.setModel(PlayerTableModel);
        PlayerTableScrollPane.setViewportView(playerInfoTable);
        
        ViewPlayerStatsButton.setEnabled(false);
        
        
        playerInfoTable.getTableHeader().addMouseListener(new MouseAdapter() {

    @Override
    public void mouseClicked(MouseEvent e) {
        int col = playerInfoTable.columnAtPoint(e.getPoint());
        String ColumnName = playerInfoTable.getColumnName(col);
        sortandUpdatePlayerList(ColumnName);
        
    }
        
        });
        
        
    } catch (Exception e) {
        System.err.println(e);
    }

    playerInfoTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
        

        @Override
        public void valueChanged(ListSelectionEvent e) {
            ViewPlayerStatsButton.setEnabled(true);
        }
    });
    
    
}

private void sortandUpdatePlayerList(String ColumnName){
    String compressString = ColumnName.replaceAll("\\s+","");
    Field[] playerField = Player.class.getDeclaredFields();
    
    for (Field f : playerField) {
    
        String currentfield = f.getName();
        if (f.getName().equalsIgnoreCase(compressString)|| f.getName().contains(compressString)){
        
            
           mPlayerArrayList = (PlayerArrayList) sortListbyTypeName(currentfield, getMainPlayerList());
            
            
            PlayerTableModel.updatePlayerList(getMainPlayerList());
            playerInfoTable.setModel(PlayerTableModel);
            
            PlayerTableScrollPane.setViewportView(playerInfoTable);
            break;
        }
    }
    
}

    private PlayerArrayList sortListbyTypeName(String fieldName, PlayerArrayList PlayerList) {
        
        
        
        if(fieldName.equalsIgnoreCase("firstName")){

            Collections.sort(PlayerList, Comparator.comparing(Player::getFirstName));
        }
        else if(fieldName.equalsIgnoreCase("lastName")){
            Collections.sort(PlayerList, Comparator.comparing(Player::getLastName));
        }
        else if(fieldName.equalsIgnoreCase("id")){
            Collections.sort(PlayerList, Comparator.comparing(Player::getId));
        }
        else if(fieldName.equalsIgnoreCase("gamesPlayed")){
            Collections.sort(PlayerList, Comparator.comparing(Player::getGamesPlayed));
        }
        else if(fieldName.equalsIgnoreCase("gamesWon")){
            Collections.sort(PlayerList, Comparator.comparing(Player::getGamesWon));
        }
        else if(fieldName.equalsIgnoreCase("gamesLost")){
            Collections.sort(PlayerList, Comparator.comparing(Player::getGamesLost));
        }
        else if(fieldName.equalsIgnoreCase("gamesDrawn")){
            Collections.sort(PlayerList, Comparator.comparing(Player::getGamesDrawn));
        }
        else if(fieldName.equalsIgnoreCase("highestRating")){
            Collections.sort(PlayerList, Comparator.comparing(Player::getHighestRating));
        }
        else if(fieldName.equalsIgnoreCase("lowestRating")){
            Collections.sort(PlayerList, Comparator.comparing(Player::getLowestRating));
        }
        else if(fieldName.equalsIgnoreCase("currentRating")){
            Collections.sort(PlayerList, Comparator.comparing(Player::getCurrentRating));
        }
        else if(fieldName.equalsIgnoreCase("DatabaseRank")){
            Collections.sort(PlayerList, Comparator.comparing(Player::getDatabaseRank));
        }
        
        
        
        return PlayerList;
        
    }

    public PlayerArrayList getMainPlayerList() {
        return mPlayerArrayList;
    }

    
   
    

public class DebugOutText{

        public DebugOutText(String DString) {
            DebugTxtArea.setText(DString);
        }

   
}

public class localEventlistener implements PlayerEventListener{

        @Override
        public void updateDatabase(PlayerArrayList PlayerList) {
            
            
            if(PlayerList.emptyStatus == 1){
                playerInfoTable.setModel(new DefaultTableModel());
                PlayerTableScrollPane.setViewportView(playerInfoTable);
                mPlayerArrayList.clear();
                
                File TrashXml;
                TrashXml = new File("PlayerDataBase.xml");
                boolean hasTrashed = TrashXml.delete();
                
                DebugTxtArea.append(Boolean.toString(hasTrashed));
                
                DebugTxtArea.setText("No More Players. Database was deleted !!.\n\nUse the add player button to continue");
            }else{
            
                    try {
                        DBhandle.recalculateDatabaseRankings(PlayerList);
                        mPlayerArrayList = PlayerList.getPlayerArrayListCopy();
                        PlayerTableModel = new PlayerTableModel(PlayerList);

                        playerInfoTable.setModel(PlayerTableModel);
                        PlayerTableScrollPane.setViewportView(playerInfoTable);


                    } catch (ParserConfigurationException ex) {
                        System.out.println(ex);
                    }
            }
        }

        @Override
        public void updateDebugText(String newString) {
            DebugTxtArea.setText(newString);
        }

        @Override
        public void windowClosing() {
          MainFrame.super.setEnabled(true);
        }


}



}
