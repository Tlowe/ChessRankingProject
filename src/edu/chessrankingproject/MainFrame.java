/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.chessrankingproject;

import java.awt.Color;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Travis Lowe
 */
public class MainFrame extends javax.swing.JFrame {

    DataBasetoXML DBhandle;
    ArrayList<Player> PlayerList = new ArrayList<>();
    PlayerTableModel PlayerTableModel ;
    
    PlayerEventListener mainHandler = new localEventlistener();
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        
        initComponents();
        initProgram();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AddNewPlayerButton = new javax.swing.JButton();
        AddGameResultsButton = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        SearchDataBaseButton = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        PlayerTableScrollPane = new javax.swing.JScrollPane();
        playerInfoTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        DebugTxtArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        AddNewPlayerButton.setText("Add Player");
        AddNewPlayerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddNewPlayerButtonActionPerformed(evt);
            }
        });

        AddGameResultsButton.setText("Add New Game Results");
        AddGameResultsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddGameResultsButtonActionPerformed(evt);
            }
        });

        jButton3.setText("View Player Statistics");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setText("Chess Club Ranking");

        SearchDataBaseButton.setText("Search DataBase");
        SearchDataBaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchDataBaseButtonActionPerformed(evt);
            }
        });

        jTextField1.setText("Player Name . . .");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        playerInfoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Games Played","Current Ranking", "Games Won", "Games Lost", "Games Drawn", "Highest Rating", "Lowest Rating","Database Ranking"
            }

        ));
        PlayerTableScrollPane.setViewportView(playerInfoTable);

        DebugTxtArea.setColumns(20);
        DebugTxtArea.setRows(5);
        jScrollPane2.setViewportView(DebugTxtArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(321, 321, 321)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(689, 689, 689)
                        .addComponent(SearchDataBaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 990, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(AddNewPlayerButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(AddGameResultsButton))
                            .addComponent(jButton3)
                            .addComponent(PlayerTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 1265, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(521, 521, 521)
                        .addComponent(jLabel1)))
                .addGap(55, 55, 55))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SearchDataBaseButton)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(PlayerTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddNewPlayerButton)
                    .addComponent(AddGameResultsButton))
                .addGap(14, 14, 14)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void AddNewPlayerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddNewPlayerButtonActionPerformed
//        try {
//            DataBasetoXML playerDB = new DataBasetoXML("John", "Doe");
//            DebugTxtArea.setForeground(Color.red);
//           
//            DebugTxtArea.setText("New Folder Created and Player added to C:/ChessGame !!");
//        } catch (Exception e) {
//            
//            
//        }
        
        PlayerFrame pFrame = new PlayerFrame();
        pFrame.addListener(mainHandler);
        pFrame.setVisible(true);
   
    }//GEN-LAST:event_AddNewPlayerButtonActionPerformed

    private void SearchDataBaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchDataBaseButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SearchDataBaseButtonActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void AddGameResultsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddGameResultsButtonActionPerformed
        GameResultsFrame gFrame = new GameResultsFrame(PlayerList);
        gFrame.addListener(mainHandler);
        gFrame.setVisible(true);
    }//GEN-LAST:event_AddGameResultsButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddGameResultsButton;
    private javax.swing.JButton AddNewPlayerButton;
    private javax.swing.JTextArea DebugTxtArea;
    private javax.swing.JScrollPane PlayerTableScrollPane;
    private javax.swing.JButton SearchDataBaseButton;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTable playerInfoTable;
    // End of variables declaration//GEN-END:variables

private void initProgram(){

    try {
        DBhandle = new DataBasetoXML();
        PlayerList = DBhandle.getAllPlayersSorted(PlayerList);
        
        PlayerTableModel = new PlayerTableModel(PlayerList);
        
        playerInfoTable.setModel(PlayerTableModel);
        PlayerTableScrollPane.setViewportView(playerInfoTable);
        
        
        playerInfoTable.getTableHeader().addMouseListener(new MouseAdapter() {

    @Override
    public void mouseClicked(MouseEvent e) {
        int col = playerInfoTable.columnAtPoint(e.getPoint());
        String ColumnName = playerInfoTable.getColumnName(col);
        sortandUpdatePlayerList(ColumnName);
        
    }
        
        });
        
        
    } catch (Exception e) {
        System.out.println(e);
    }
// try to parse database
// if no database exists, prompt user and create one.
// if database exists create an arraylist full of all players
// create a default table model that will list all of the players and their stats
// display this table
}

private void sortandUpdatePlayerList(String ColumnName){
    String compressString = ColumnName.replaceAll("\\s+","");
    Field[] playerField = Player.class.getDeclaredFields();
    
    for (Field f : playerField) {
    
        String currentfield = f.getName();
        if (f.getName().equalsIgnoreCase(compressString)|| f.getName().contains(compressString)){
        
            
            sortListbyTypeName(currentfield, PlayerList);
            
            
            PlayerTableModel.updatePlayerList(PlayerList);
            playerInfoTable.setModel(PlayerTableModel);
            
            PlayerTableScrollPane.setViewportView(playerInfoTable);
            break;
        }
    }
    
}

    private void sortListbyTypeName(String fieldName, ArrayList<Player> PlayerList) {
        
        
        
        if(fieldName.equalsIgnoreCase("firstName")){

            Collections.sort(PlayerList, Comparator.comparing(Player::getFirstName));
        }
        else if(fieldName.equalsIgnoreCase("lastName")){
            Collections.sort(PlayerList, Comparator.comparing(Player::getLastName));
        }
        else if(fieldName.equalsIgnoreCase("gamesPlayed")){
            Collections.sort(PlayerList, Comparator.comparing(Player::getGamesPlayed));
        }
        else if(fieldName.equalsIgnoreCase("gamesWon")){
            Collections.sort(PlayerList, Comparator.comparing(Player::getGamesWon));
        }
        else if(fieldName.equalsIgnoreCase("gamesLost")){
            Collections.sort(PlayerList, Comparator.comparing(Player::getGamesLost));
        }
        else if(fieldName.equalsIgnoreCase("gamesDrawn")){
            Collections.sort(PlayerList, Comparator.comparing(Player::getGamesDrawn));
        }
        else if(fieldName.equalsIgnoreCase("highestRating")){
            Collections.sort(PlayerList, Comparator.comparing(Player::getHighestRating));
        }
        else if(fieldName.equalsIgnoreCase("lowestRating")){
            Collections.sort(PlayerList, Comparator.comparing(Player::getLowestRating));
        }
        else if(fieldName.equalsIgnoreCase("currentRank")){
            Collections.sort(PlayerList, Comparator.comparing(Player::getCurrentRank));
        }
        else if(fieldName.equalsIgnoreCase("DatabaseRank")){
            Collections.sort(PlayerList, Comparator.comparing(Player::getDatabaseRank));
        }
        
        
        
        
        
    }


public class DebugOutText{

        public DebugOutText(String DString) {
            DebugTxtArea.setText(DString);
        }

   
}

public class localEventlistener implements PlayerEventListener{

        @Override
        public void updateDatabase(ArrayList<Player> PlayerList) {
            DBhandle.recalculatePlayers(PlayerList);
        }

        @Override
        public void updateDebugText(String newString) {
            DebugTxtArea.setText(newString);
        }


}



}
